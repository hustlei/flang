// /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.cpp generated by reflex 3.0.10 from /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l

#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_bison               true
#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.cpp"
#define REFLEX_OPTION_prefix              yy
#define REFLEX_OPTION_yy                  true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (8)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;
#undef yyin
#undef yyout
#undef yytext
#undef yyleng
#undef yylineno

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream        *os    = NULL)
    :
      FlexLexer(input, os)
  {
  }
  virtual int yylex(void);
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
/* 词法分析源码 */
/* 用relex把lexer.l生成lexer.cpp*/


#include "../AST/ast.hpp"    //parser.hpp需要ast.hpp内的定义
#include "../Parse/parser.hpp"    // parser.hpp是bison编译parser.y生成的头文件，内含token声明和yylval声明。

#define TOKEN_WITHVAL(t)  yylval.string = new std::string(yytext, yyleng);return t;
#define TOKEN(t)    yylval.token = t;return t;

#line 13 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
/*//只能处理一个文件，noyywrap可以不需要链接fl库。c++不能连接fl库*/


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON                                                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

yyFlexLexer YY_SCANNER;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

FILE *yyin = stdin;
FILE *yyout = stdout;

char *yytext;
yy_size_t yyleng;
int yylineno;

YY_EXTERN_C int yylex(void)
{
  if (yyin != YY_SCANNER.in())
    YY_SCANNER.in(yyin);  int yylex_token = YY_SCANNER.yylex();
  yytext = const_cast<char*>(YY_SCANNER.YYText());
  yyleng = static_cast<yy_size_t>(YY_SCANNER.YYLeng());
  yylineno = static_cast<int>(YY_SCANNER.lineno());
  return yylex_token;
}

#define yytext const_cast<char*>(YY_SCANNER.YYText())
#define yyleng static_cast<yy_size_t>(YY_SCANNER.YYLeng())
#define yylineno static_cast<int>(YY_SCANNER.lineno())

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)([0-9]+)|([A-Za-z]+)|((?:\\Q=\\E))|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q*\\E))|((?:\\Q/\\E))|([\\x0d]|[\\x0a]|[\\x0a\\x0d])";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:16: [0-9]+ :
            YY_USER_ACTION
#line 16 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ yylval.string = new std::string(yytext, yyleng);return INTEGER; }
            YY_BREAK
          case 2: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:17: [a-zA-Z]+ :
            YY_USER_ACTION
#line 17 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ TOKEN_WITHVAL(IDENTIFIER) }
            YY_BREAK
          case 3: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:18: "=" :
            YY_USER_ACTION
#line 18 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(ASSIGN); }
            YY_BREAK
          case 4: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:19: "+" :
            YY_USER_ACTION
#line 19 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(ADD); }
            YY_BREAK
          case 5: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:20: "-" :
            YY_USER_ACTION
#line 20 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(SUB); }
            YY_BREAK
          case 6: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:21: "*" :
            YY_USER_ACTION
#line 21 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(MUL); }
            YY_BREAK
          case 7: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:22: "/" :
            YY_USER_ACTION
#line 22 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(DIV); }
            YY_BREAK
          case 8: // rule /mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l:23: [\r]|[\n]|[\r\n] :
            YY_USER_ACTION
#line 23 "/mnt/d/Download/sync/weiyun/coding/lang/flang/src/Lex/lexer.l"
{ return TOKEN(EOL); }
            YY_BREAK
        }
  }
}
